# a = [[10, 20], 
#      [30, 40], 
#      [50, 60]]
# print(a)

# print(a[0][1])
# print(a[1][0])
# print(a[2][0])

# 리스트 안에 리스트를 넣어서 2차원의 리스트를 만들 수 있다.
# 2차원의 리스트를 인덱스에 접근하는 방법은 a[세로 인덱스][가로 인덱스]로 값을 반환할 수 있다.

# a = ((10, 20), 
#      (30, 40),
#      (50, 60))
# b = [(10, 20), 
#      (30, 40),
#      (50, 60)]
# c = ([10, 20], 
#      [30, 40],
#      [50, 60])

# 튜플을 이용해서 만들 수 있다.
# 튜플을 이용할 경우 a와 같이 외부 내부 모두 튜플인 경우 변경할 수 없다.
# b와 같이 외부는 리스트고 내부는 튜플인 경우 외부만 변경이 가능하다.
# c와 같이 외부는 튜플이고 내부는 리스트인 경우 내부만 변경이 가능하다.

# a = [[10, 20], 
#      [30, 40], 
#      [50, 60]]
# print(a)

# from pprint import pprint
# pprint(a, indent=1, width=20)

# a를 그대로 출력하면 일반 리스트처럼 일렬로 출력된다
# 이 때 pprint모듈에서 pprint함수를 이용해서 출력하면 2차원으로 출력이 가능하다.
# indent는 각 줄의 시작점을 지정한다.
# width는 가로폭인데 이것을 줄이면 리스트가 눌리며 줄이 바뀌는 원리다.

# a = [[10, 20], [30, 40], [50, 60]]
# for x, y in a: 
#     print(x, y) 

# b = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]
# for g, h in a:
#     print(g, h)

# c = [[10, 20], [30, 40], [50, 60]]
# for d, e, f in a: 
#     print(d, e, f) 

# for문에서 a를 가져와 할당하는 변수를 2개로 줄 경우 각 리스트의 앞 요소 2개를 꺼내와서 할당한다.
# 내부 리스트(가로 줄)의 요소가 할당하는 변수보다 많은건 오류가 나지 않지만 변수가 더 많으면 오류가 난다.

# a = [[10, 20], [30, 40], [50, 60]]

# for i in a:
#     for j in i:
#         print(j, end=' ')
# print()

# for문을 이용해 a내부에 리스트를 i에 할당하고 내부에 다시 for문으로 j에 각 리스트 요소의 요소를 할당하면 요소를 모두 뽑아낼 수 있다.

# a = [[10, 20], [30, 40], [50, 60]]

# for i in range(len(a)):
#     for j in range(len(a[i])):
#         print(a[i][j], end=' ')
#     print()

# a = [[10, 20], [30, 40], [50, 60]]
# for x, y in a: 
#     print(x, y) 

# raneg(len(a))는 a의 새로 인덱스와 같은 값을 갖습니다.
# range(len(a[i]))는 각 가로의 인덱스와 같은 값을 갖습니다.
# print(a[i][j])는 결국 아래의 for문에서 x,y와 같은 값을 반환한다.

# a = [[10, 20], [30, 40], [50, 60]]
# i = 0
# while i < len(a):
#     x, y = a[i]
#     print(x, y)
#     i += 1

# a = [[10, 20], [30, 40], [50, 60]]
# for x, y in a: 
#     print(x, y) 
# 와 같은 값을 내는 while문입니다.

# a = [[10, 20], [30, 40], [50, 60]]
 
# i = 0
# while i < len(a):           # 세로 크기
#     j = 0
#     while j < len(a[i]):    # 가로 크기
#         print(a[i][j], end=' ')
#         j += 1              # 가로 인덱스를 1 증가시킴
#     print()
#     i += 1                  # 세로 인덱스를 1 증가시킴

# 이중 while문과 len함수를 이용해서 for문에서와 같이 활용할 수 있다.

# a = []
# for i in range(10):
#     a.append(0)
# print(a)
# b = []
# for j in range(10):
#     b.append(j)
# print(b)

# for문과 range함수를 사용해서 리스트를 만들 수 있다.

# a = []

# for i in range(3):
#     line = []
#     for j in range(2):
#         line.append(0)
#     a.append(line)
# print(a)

# 첫번째 for문에서 빈리스트를 하나 생성하고 두번째 포문에서 그 리스트에 요소를 채워준다.
# 두 번째 for문이 종료되고 나와서 만들어진 리스트를 리스트 a의 요소로 추가한다.
# 이렇게 첫번째 for문이 3번 반복하고 나면 [[0, 0], [0, 0], [0, 0]]이라는 값이 출력된다.
# 위 코드를 리스트 표현식으로 만들면 아래와 같다.
# a = [[0 for j in range(2)] for i in range(3)]
# print(a)

# a = [3, 1, 3, 2, 5]
# b = []

# for i in a:
#     line = []
#     for j in range(i):
#         line.append(0)
#     b.append(line)
# print(b)

# a를 i에 할당한 뒤 빈 리스트 line을 생성하고 range함수로 할당된 i값만큼 횟수로 돌아가는 j에 할당하는 for문을 만들어준다.
# a의 각 요소만큼 0을 line에 집어넣고 for문이 종료되면 그 리스트를 b에 집어넣어준다.
# 이렇게 반복하고 나면 톱니리스트가 만들어 진다.

# a = [[10, 20], [30, 40]]
# b = a
# b[0][0] = 500
# print(a)
# print(b)

# b에 a를 할당하고 b의 요소를 바꾸면 a에도 적용된다. 이는 1차원 리스트와 동일하다.

# a = [[10, 20], [30, 40]]
# b = a.copy()
# b[0][0] = 500
# print(a)
# print(b)

# b에 a를 메소드를 사용해 카피했지만 여전히 b의 요소를 바꾸면 a에도 적용이 된다.
# 2차원 이상의 다차원 리스트는 완전히 복사하려면 copy모듈에서 deepcopy함수를 사용해야만 한다.

