# 리스트, 튜플, range, 문자열, bytes, bytearray 등의 연속적으로 이어진 값을 갖고 있는 자료형을 시퀸스 자료형이라합니다.

# a = list(range(0, 100, 10))
# print(a)
# print(30 in a)
# print(100 in a)
# print(100 not in a)
# print(30 not in a)
# 시퀸스 자료형에 어떤 값이 있는지 in 연산자를 사용하여 확인 할 수 있습니다.
# 마찬가지로 시퀸스 자료형에 어떤 값이 없는지는 not in 연산자를 사용하여 확인 할 수 있습니다.

# print(43 in (38, 76, 43, 62, 19))
# print(1 in range(10))
# print('P' in 'Hello Python')

# 튜플, range, 문자열 에서도 똑같이 적용됩니다.

# a = [1, 2, 3, 4, 5]
# b = [6, 7, 8]
# c = list(range(9, 13))
# d = a + b + c
# print(d)

# range 를 제외한 시퀸스 자료형은 + 연산자를 사용하여 연결할 수 있습니다.
# 단, list함수 또는 tuple 함수를 사용해 리스트나 튜플화 했을 경우 연결할 수 있습니다.

# a = "Hello,"
# b = 'Python!'
# c = a + b
# print(c)

# 문자열도 + 연산자로 연결할 수 있으며, '나 "를 구분하지 않습니다.

# a = [1, 2, 3]
# b = [4, 5, 6]
# c = list(range(7,10))
# d = 'Hello,'
# print(a*3)
# print(b*3)
# print(c*3)
# print(d*3)

# *연산자를 사용하면 반복하게 만듭니다. range는 마찬가지로 연산자를 바로 사용할 수 없으며, 리스트 또는 튜플화를 거치고 사용할 수 있습니다.

# a = [1, 2, 3, 4]
# b = [5, 10, 15, 20]
# c = range(0, 10, 2)
# d = 'Hello, Python!'
# print(len(a))
# print(len(b))
# print(len(c))
# print(len(d))

# len함수를 이용하여 시퀸스 자료형의 값의 길이(값의 개수)를 구할 수 있습니다.
# 이 때, 문자열은 공백까지 개수에 포함합니다.

# a = [1, 2, 3, 4]
# b = [5, 10, 15, 20]
# c = range(0, 10, 2)
# d = 'Hello, Python!'
# print(a[2])
# print(b[1])
# print(c[4])
# print(d[10])

# 스퀸스 자료형을 변수에 할당할 후 변수[인덱스]를 활용하여 element의 추출이 가능합니다.
# 인덱스란 위치값으로 몇 번째 자리에 있는지를 나타내는 값입니다.

# a = [1, 2, 3, 4]
# b = [5, 10, 15, 20]
# c = range(0, 10, 2)
# d = 'Hello, Python!'
# print(a[-2])
# print(b[-1])
# print(c[-4])
# print(d[-10])

# 인덱스를 음수로 지정하면 뒤에서부터 헤아려서 값을 나타냅니다.
# 단, 음수인덱스는 0이 아닌 -1부터 헤아립니다.

# a = [0, 0, 0, 0, 0]
# a[0] = 38
# a[1] = 21
# a[2] = 53
# a[3] = 62
# a[4] = 19
# print(a)

# 리스트를 제외한 튜플, range, 문자열은 읽기전용이기 때문에 할당기능을 사용할 수 없습니다.

# a = [0, 0, 0, 0, 0]
# a[0] = 38
# a[1] = 21
# a[2] = 53
# a[3] = 62
# a[4] = 19
# print(a)
# del a[1]
# del a[3]
# print(a)

# del을 이용하여 요소를 제거할 수 있습니다.

# a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
# print(a)
# print(a[0:4])
# print(a[0:])
# print(a[:10])
# print(a[0:10])
# print(a[3:8])
# print(a[3:-3])

# a[x, y]를 이용하여 리스트의 일부를 잘라서 새로운 리스트를 만들 수 있습니다. 이를 슬라이스라 합니다.
# 슬라이스도 마찬가지로 y값은 가져오지 않고 y-1의 값까지 가져옵니다.
# 리스트의 끝값을 포함하여 슬라이스 하려면 y값을 비워두거나 마지막인덱스+1의 값을 넣어줘야 합니다.
# -값을 이용한 인덱스지정도 가능합니다.
# 슬라이스의 처음값이나 두번째 값을 비워두면 맨처음부터 또는 맨마지막까지를 의미합니다.

# a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
# print(a[2:8:3])

# 슬라이스도 증가폭을 지정할 수 있습니다.
# a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
# print(a[::2])
# print(a[2::])
# print(a[:6:])
# print(a[2::2])
# print(a[:8:2])
# print(a[7:1:-2])

# 시작값, 마지막값, 증감값을 비우는것을 혼용할 수 있습니다.
# 역순으로 가는 슬라이스는 시작 마지막 값인덱스를 역순으로 놓고 증감값을 음수로 지정하면 추출됩니다.
# 슬라이스는 튜플, 문자열, range 모두 사용할 수 있습니다.

# a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
# b = (0, 20, 40, 60, 80, 100, 120)
# c = range(10)
# d = 'Hello, world!'
# s = slice(2, 6)
# print(a[s])
# print(b[s])
# print(c[s])
# print(d[s])

# 슬리이스 객체를 하나 만든 후 여러 시퀸스 객체에 사용하는 것도 가능하다.

# a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
# a[2:5] = 20, 40, 60
# print(a)
# b = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
# b[2:5] = ["Oh!"]
# print(b)
# c = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
# c[2:5] = ["Oh!", "My", "God", "them", "they"]
# print(c)

# 슬라이스에 요소 할당하기도 가능하다.
# 슬라이스와 할당되는 요소의 개수가 달라도 할당됩니다.
# 슬라되어 사라지는 요소의 개수는 그대로지만 할당되는 요소가 줄어들거나 늘어납니다.

# a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
# a[2:8:2] = ['a', 'b', 'c']
# print(a)

# 증감폭이 있는 슬라이스 후 요소 삽입도 가능합니다.
# 단, 증감폭을 지정했을 경우에는 슬라이스된 요소개수와 삽입하는 요소의 개수가 동일해야만 가능합니다.
# 튜플, 문자열, range는 슬라이스 할당을 사용할 수 없습니다.

# a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
# del a[2:5]
# print(a)
# b = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
# del b[2:8:2]
# print(b)

# del을 이용해 슬라이스해서 삭제할 수 있습니다.
# 튜플, 문자열, range는 슬라이스 삭제를 사용할 수 없습니다.