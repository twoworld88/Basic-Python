# def hello():
#     print('Hello, world!')
# hello()

# def 함수명():을 이용해서 함수를 생성할 수 있다.
# 아래줄부터 들여쓰기를 하고 함수 실행시 실행될 코드를 입력해준다.
# 함수를 실행하려면 함수명()으로 가능하다.
# 함수는 항상 정의,생성 후 실행을 할 수 있다.

# def pass_def():
#     pass

# 함수에 실행코드를 pass로 입력하면 아무 일도 하지 않는 함수를 만들 수 있다.
# 함수의 틀은 유지할 필요가 있으나 실행할 것이 결정되지 않거나 실행할 필요가 없을 경우 사용한다,
# 타인의 코드를 참고하거나 따와 보면 엄청 많이 사용하는 코드다.

# def add(a, b):
#     print(a + b)
# add(30, 20)

# def 함수명(매개변수1, 매개변수2):와 같이 매개변수를 지정한 함수를 만들 수 있다.
# 아래줄부턴 들여쓰기를 하고 매개변수1,2를 이용한 산식을 넣어서 산식을 해주는 함수를 만들 수 있다.
# 여기서 함수를 호출할 때 넣은 30, 20과 같은 수를 인수(argument)라고 합니다.

# def 함수명(a, b, c):
#     """독스트링은 함수 바로 아래 와야하며, 함수에 대한 설명을 넣을 수 있습니다."""
#     코드
    
# def 함수명(a, b, c):
#     """
#     독스트링은 함수 바로 아래 와야하며, 
#     함수에 대한 설명을 넣을 수 있습니다."""
#     코드
    
# 위 와 같이 함수와 코드사이에 독스트링(설명)을 넣어줄 수 있으며, 독스트링은 여러줄도 가능합니다.
# 독스트링과 함수 사이에 절대 다른 코드가 와서는 안됩니다.

# def add(a, b):
#     """이 함수는 a와 b를 더한 뒤 결과를 반환하는 함수입니다."""
#     return a + b

# print(add(30, 20))
# x = add(30, 20)
# print(x)
# print(add.__doc__)

# 독스트링은 함수를 실행하거나 그 결과를 출력해도 출력되지 않습니다.
# 특정 메소드 __doc__를 사용해 출력하면 출력됩니다.
# return을 사용하면 return 줄에서 실행 또는 지정된 값을 함수 밖으로 반환해줍니다.
# 반환된 값을 변수에 지정하고 출력하면 함수로 만들어진 값을 함수 밖에서 출력할 수 있습니다.

# def one():
#     return 1
# x = one()
# print(x)

# 매개변수 없이 함수를 실행하면 무조건 지정된 값을 반환하도록 만들 수 있습니다.

# def not_ten(a):
#     if a == 10:
#         return
#     print(a, '입니다.', sep='')
# not_ten(5)
# not_ten(10)

# return은 값을 반환하는 용도뿐 아니라 함수 실행 도중에 바로 빠져나오도록 하는 기능도 할 수 있습니다.

# def add_sub(a, b):
#     return a + b, a - b

# x, y = add_sub(30, 50)
# print(x)
# print(y)

# def multi(a, b):
#     return a + b, a - b, a * b, a ** b, a / b, a % b

# i, j, k, l, m, n = multi(30, 2)
# print(i)
# print(j)
# print(k)
# print(l)
# print(m)
# print(n)

# 함수 내 return 값을 여러개 지정 할 수 있습니다.
# 이럴 경우 return 값의 출력을 위해서 함수를 리턴값 개수에 맞는 변수에 할당해 줘야합니다.

# def add_sub(a, b):
#     return a + b, a - b

# x = add_sub(30, 50)
# print(x)

# def multi(a, b):
#     return a + b, a - b, a * b, a ** b, a / b, a % b

# i = multi(30, 2)
# print(i)

# 리턴값은 본래 튜플로 반환이 됩니다.
# 튜플의 요소를 각각의 변수에 할당하는 것과 같다고 보면 됩니다.

# def mul(a, b):
#     c = a * b
#     return c

# def add(a, b):
#     c = a + b
#     print(c)
#     d = mul(a, b)
#     print(d)

# x = 10
# y = 20
# add(x, y)

# 위 코드의 실행 과정을 살펴보면 아래와 같습니다.
# 먼저 x = 10, y = 20이 할당되고 add(x, y)가 add(10, 20)으로 실행됩니다.
# 108번 줄로 a = 10, b = 20이 할당되면서 c = 10 + 20 = 30이라는 결과가 나옵니다
# 그 다음 d 값을 구하기 위해 104번 줄로 a = 10, b = 20이 할당되면서 c = 200이라는 결과가 나옵니다.
# 값 c가 함수밖으로 return되면서 d에 할당되어 a = 10, b = 20, c = 30, d =200이라는 결과가 나옵니다.
